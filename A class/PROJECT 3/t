
(defun p()
    (princ "Welcome to my Project.")
    (finish-output)
    (princ "I completed all the assignments and labelled the sections: ")
    (finish-output)
    (format t "~&~a" "1 for list")
    (finish-output)
    (format t "~&~a" "2 for sets")
    (finish-output)
    (format t "~&~a" "3 for maths")
    (finish-output)
    (format t "~&~a" "4 for required functions")
    (finish-output)
    (format t "~&~a" "Please enter a number for the session you want to work on: ")
    (finish-output)

    (setq section (read))
    
    (cond   ((= 1 section) (lists))
            ((= 2 section) (sets))
            ((= 3 section) (maths))
            ((= 4 section) (required))
    )
)

(defun lists() 
    (format t "~&~a" "You are in lists: Choose any of the list functions from 1 to 5: ")    
    (finish-output)
    (format t "~&~a" "1 for append")
    (finish-output)
    (format t "~&~a" "2 for reverse")
    (finish-output)
    (format t "~&~a" "8 for addtoend")
    (finish-output)
    (format t "~&~a" "9 for indexof")
    (finish-output)
    (format t "~&~a" "10 for remove all")
    (finish-output)
    (format t "~&~a" "Please enter a number for the function you want to work on: ")
    (setq l (read))
    (cond   ((= 1 l) (append_start))
            ((= 2 l) (reverse_start))
            ((= 8 l) (addtoend_start))
            ((= 9 l) (indexof_start))
            ((= 10 l) (remove_start))
    )
)

(defun sets() 
    (princ "You are in sets: Choose any of the set functions from 1 to 4: ")    
    (finish-output)
    (format t "~&~a" "1 for member")
    (finish-output)
    (format t "~&~a" "2 for insert")
    (finish-output)
    (format t "~&~a" "3 for union")
    (finish-output)
    (format t "~&~a" "4 for cardinality")
    (finish-output)
    (format t "~&~a" "Please enter a number for the function you want to work on: ")
    (finish-output)
    (setq l (read))
    (cond   ((= 1 l) (member_start))
            ((= 2 l) (insert_start))
            ((= 3 l) (union_start))
            ((= 4 l) (right-tri_start))
            ((= 5 l) (cardinality_start))
    )
)


(defun maths() 
    (princ "You are in Maths: Choose any of the math functions from 1 to 4: ")    
    (finish-output)
    (format t "~&~a" "1 for abs")
    (finish-output)
    (format t "~&~a" "2 for factorial")
    (finish-output)
    (format t "~&~a" "3 for right-tri")
    (finish-output)
    (format t "~&~a" "4 for cardinality")
    (finish-output)
    (format t "~&~a" "5 for prime")
    (finish-output)
    (format t "~&~a" "Please enter a number for the function you want to work on: ")
    (finish-output)
    (setq l (read))
    (cond   ((= 1 l) (abs_start))
            ((= 2 l) (factorial_start))
            ((= 3 l) (right-tri_start))
            ((= 4 l) (cardinality_start))
            ((= 5 l) (prime_start))
    )
)

(defun required() 
    (princ "You are in Required: Choose any of the required functions from 1 to 3: ")    
    (finish-output)
    (format t "~&~a" "1 for perfectp")
    (finish-output)
    (format t "~&~a" "2 for abundantp")
    (finish-output)
    (format t "~&~a" "3 for deficientp")
    (finish-output)
    (format t "~&~a" "Please enter a number for the function you want to work on: ")
    (finish-output)
    (setq l (read))
    (cond   ((= 1 l) (perfectp_start))
            ((= 2 l) (abundantp_start))
            ((= 3 l) (deficientp_start))
    )
)



